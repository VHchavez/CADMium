"""

test_psgrid.py
Tests attributes and methods for an instance of psgrid
Using Li2 example

"""

import pytest
from CADMium.psgrid import Psgrid
import numpy as np

@pytest.fixture()
def grid_test():
    
    #Distance of the nuclei from grid center
    a = 5.122/2
    #Number of points per block
    NP = 2
    #Number of blocks [angular, radial]
    NM = [3,3]
    #Maximum radial coordinate
    L = np.arcsinh(15.0/a)
    loc = np.array(range(-4,5))
    #Initialize
    grid = Psgrid(NP, NM, a, L, loc)
    grid.initialize()

    return grid


def test_NP(grid_test):
    assert grid_test.NP == 2

def test_NMa(grid_test):
    assert grid_test.NMa == 3

def test_NMr(grid_test):
    assert grid_test.NMr == 3

def test_Na(grid_test):
    assert grid_test.Na == 4

def test_Nr(grid_test):
    assert grid_test.Nr == 4

def test_Nelem(grid_test):
    assert grid_test.Nelem == 16

def test_xa(grid_test):
    xa = np.array([     0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069])

    np.testing.assert_allclose(xa, grid_test.xa)

def test_xr(grid_test):
    xr = np.array([     0.308501080915926,
                        0.925503242747777,
                        1.542505404579628,
                        2.159507566411479,])

    np.testing.assert_allclose(xr, grid_test.xr)

def test_Xa(grid_test):
    Xa = np.array([     0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069]) 

    np.testing.assert_allclose(Xa, grid_test.Xa)

def test_Xr(grid_test):
    Xr = np.array([     0.308501080915926,
                        0.308501080915926,
                        0.308501080915926,
                        0.308501080915926,
                        0.925503242747777,
                        0.925503242747777,
                        0.925503242747777,
                        0.925503242747777,
                        1.542505404579628,
                        1.542505404579628,
                        1.542505404579628,
                        1.542505404579628,
                        2.159507566411479,
                        2.159507566411479,
                        2.159507566411479,
                        2.159507566411479])

    np.testing.assert_allclose(Xr, grid_test.Xr)

def test_ha(grid_test):
    assert np.isclose(grid_test.ha, 0.7854)

def test_hr(grid_test):
    assert np.isclose(grid_test.hr, 0.6170)

def test_Y(grid_test):
    Y = np.array([      0.307165935651619,
                        0.741564167749160,
                        0.741564167749160,
                        0.307165935651619,
                        1.042190413606254,
                        2.516070231103444,
                        2.516070231103444,
                        1.042190413606254,
                        2.186715630561777,
                        5.279198532355475,
                        5.279198532355475,
                        2.186715630561777,
                        4.190452038686583,
                        10.116646144271131,
                        10.116646144271131,
                        4.190452038686583])

    np.testing.assert_allclose(Y, grid_test.Y)

def test_Z(grid_test):
    Z = np.array([   2.479543498790616,
                    1.027060545693109,
                    -1.027060545693109,
                    -2.479543498790616,
                    3.453813538011316,
                    1.430616409352090,
                    -1.430616409352090,
                    -3.453813538011316,
                    5.785166868079910,
                    2.396294577350181,
                    -2.396294577350181,
                    -5.785166868079910,
                    10.389646180496298,
                    4.303532356219392,
                    -4.303532356219392,
                    -10.389646180496298,])


    np.testing.assert_allclose(Z, grid_test.Z)

def test_a(grid_test):
    assert np.isclose(grid_test.a, 2.5610)

def test_R(grid_test):
    assert grid_test.R is None

def test_L(grid_test):
    assert np.isclose(grid_test.L, 2.4680)

def test_w(grid_test):
    w = 1000  * np.array([  0.000492930917964,
                            0.004629204583714,
                            0.004629204583714,
                            0.000492930917964,
                            0.008730713319441,
                            0.032746625911950,
                            0.032746625911950,
                            0.008730713319441,
                            0.073500246244591,
                            0.201928715323715,
                            0.201928715323715,
                            0.073500246244591,
                            0.506487031111828,
                            1.269685992327073,
                            1.269685992327073,
                            0.506487031111828])

    np.testing.assert_allclose(w, grid_test.w)

def test_wi(grid_test):
    wi = np.array([  0.562500000000000,
                    0.750000000000000,
                    0.750000000000000,
                    0.562500000000000,
                    0.750000000000000,
                    1.000000000000000,
                    1.000000000000000,
                    0.750000000000000,
                    0.750000000000000,
                    1.000000000000000,
                    1.000000000000000,
                    0.750000000000000,
                    0.562500000000000,
                    0.750000000000000,
                    0.750000000000000,
                    0.562500000000000])

    np.testing.assert_allclose(wi, grid_test.wi)

def test_f(grid_test):
    f = np.array([  5.299365838338939,
                    0.909227433905629,
                    0.909227433905629,
                    5.299365838338939,
                    0.460336971470990,
                    0.078981337780909,
                    0.078981337780909,
                    0.460336971470990,
                    0.104564769820371,
                    0.017940478208334,
                    0.017940478208334,
                    0.104564769820371,
                    0.028473985243205,
                    0.004885363518111,
                    0.004885363518111,
                    0.028473985243205])

    np.testing.assert_allclose(f, grid_test.f)

def test_f(grid_test):
    f = np.array([  5.299365838338939,
                    0.909227433905629,
                    0.909227433905629,
                    5.299365838338939,
                    0.460336971470990,
                    0.078981337780909,
                    0.078981337780909,
                    0.460336971470990,
                    0.104564769820371,
                    0.017940478208334,
                    0.017940478208334,
                    0.104564769820371,
                    0.028473985243205,
                    0.004885363518111,
                    0.004885363518111,
                    0.028473985243205])

    np.testing.assert_allclose(f, grid_test.f)

def test_d1(grid_test):
    d1 = np.array([  0.003571428571429,
                    -0.038095238095241,
                    0.200000000000008,
                    -0.800000000000010,
                                    0,
                    0.800000000000002,
                    -0.200000000000005,
                    0.038095238095240,
                    -0.003571428571429])

    np.testing.assert_allclose(d1, grid_test.d1)

def test_d2(grid_test):
    d2 = np.array([    -0.001785714285715,
                        0.025396825396824,
                        -0.199999999999991,
                        1.599999999999974,
                        -2.847222222222186,
                        1.599999999999974,
                        -0.199999999999991,
                        0.025396825396824,
                        -0.001785714285714])

    np.testing.assert_allclose(d2, grid_test.d2)

def test_eDa1(grid_test):
    eDa1 = np.array([       -1.018591635788133,
                            -0.763943726841099,
                            0.206143545338079,
                            -0.048504363608962,
                            1.273239544735177,
                            -0.048504363608962,
                            -1.018591635788138,
                            0.303152272556002,
                            -0.303152272556002,
                            1.018591635788138,
                            0.048504363608962,
                            -1.273239544735177,
                            0.048504363608962,
                            -0.206143545338079,
                            0.763943726841099,
                            1.018591635788133])

    np.testing.assert_allclose(eDa1, grid_test.eDa1.flatten(order='F'))

def test_eDa2(grid_test):
    eDa2 = np.array([          -2.021920509129302,
                                2.269594513588339,
                                -0.283056005096042,
                                0.035382000637005,
                                2.269594513588339,
                                -4.574571027813683,
                                2.588032519321385,
                                -0.283056005096042,
                                -0.283056005096042,
                                2.588032519321385,
                                -4.574571027813683,
                                2.269594513588339,
                                0.035382000637005,
                                -0.283056005096042,
                                2.269594513588339,
                                -2.021920509129302])

    np.testing.assert_allclose(eDa2, grid_test.eDa2.flatten(order='F'))

def test_eDr1(grid_test):
    eDr1 = np.array([   -1.296591891387931,
                        -0.972443918540948,
                        0.262405501828515,
                        -0.055954114360494,
                        1.620739864234927,
                        -0.061742471018477,
                        -1.290803534729955,
                        0.324147972846992,
                        -0.385890443865469,
                        1.302380248045920,
                                        0,
                        -1.296591891387938,
                        0.067530827676459,
                        -0.324147972846992,
                        1.296591891387938,
                                        0])

    np.testing.assert_allclose(eDr1, grid_test.eDr1.flatten(order='F'))

def test_eDr2(grid_test):
    eDr2 = np.array([   -3.276200474101547,
                        3.677516790528224,
                        -0.458647218773346,
                        0.062021612538668,
                        3.677516790528224,
                        -7.412364483403117,
                        4.198185621840238,
                        -0.525359541504014,
                        -0.458647218773346,
                        4.198185621840238,
                        -7.479076806133785,
                        4.202876332032238,
                        0.062021612538668,
                        -0.525359541504014,
                        4.202876332032238,
                        -7.479076806133785])

    np.testing.assert_allclose(eDr2, grid_test.eDr2.flatten(order='F'))

def test_oDa1(grid_test):
    oDa1 = np.array([    1.018591635788133,
                        -1.273239544735177,
                        0.303152272556002,
                        -0.048504363608962,
                        0.763943726841099,
                        0.048504363608962,
                        -1.018591635788138,
                        0.206143545338079,
                        -0.206143545338079,
                        1.018591635788138,
                        -0.048504363608962,
                        -0.763943726841099,
                        0.048504363608962,
                        -0.303152272556002,
                        1.273239544735177,
                        -1.018591635788133])

    np.testing.assert_allclose(oDa1, grid_test.oDa1.flatten(order='F'))

def test_oDa2(grid_test):
    oDa2 = np.array([    -7.209565111616912,
                        2.918050088899270,
                        -0.365399570214890,
                        0.046961564481843,
                        2.918050088899270,
                        -4.656914592932530,
                        2.599612083166224,
                        -0.365399570214890,
                        -0.365399570214890,
                        2.599612083166224,
                        -4.656914592932530,
                        2.918050088899270,
                        0.046961564481843,
                        -0.365399570214890,
                        2.918050088899270,
                        -7.209565111616912 ])

    np.testing.assert_allclose(oDa2, grid_test.oDa2.flatten(order='F'))

def test_oDr1(grid_test):
    oDr1 = np.array([    1.296591891387931,
                        -1.620739864234927,
                        0.385890443865469,
                        -0.067530827676459,
                        0.972443918540948,
                        0.061742471018477,
                        -1.302380248045920,
                        0.324147972846992,
                        -0.262405501828515,
                        1.290803534729955,
                                        0,
                        -1.296591891387938,
                        0.055954114360494,
                        -0.324147972846992,
                        1.296591891387938,
                                        0  ])

    np.testing.assert_allclose(oDr1, grid_test.oDr1.flatten(order='F'))

def test_oDr2(grid_test):
    oDr2 = np.array([   -11.681953138166024,
                        4.728235873536252,
                        -0.592071864234682,
                        0.071403032922669,
                        4.728235873536252,
                        -7.545789128864453,
                        4.207567042224238,
                        -0.525359541504014,
                        -0.592071864234682,
                        4.207567042224238,
                        -7.479076806133785,
                        4.202876332032238,
                        0.071403032922669,
                        -0.525359541504014,
                        4.202876332032238,
                        -7.479076806133785 ])

    np.testing.assert_allclose(oDr2, grid_test.oDr2.flatten(order='F'))

def test_elap(grid_test):
    """
    Only tests first row
    """
    elap = np.array([      -3.714431723189209,
                            1.641330945653003,
                            -0.311752025346393,
                            0.046837243362774,
                            2.794205855224841,
                                            0,
                                            0,
                                            0,
                            -0.537213651942752,
                                            0,
                                            0,
                                            0,
                            0.088409175370554,
                                            0,
                                            0,
                                            0 ])

    np.testing.assert_allclose(elap[None,:], grid_test.elap.todense(order='F')[0,:])

def test_olap(grid_test):
    """
    Only tests first row
    """
    olap = np.array([      -3.715801444894578,
                            1.462838879837145,
                            -0.265106967507250,
                            0.050394090925612,
                            2.451111777708924,
                                            0,
                                            0,
                                            0,
                            -0.451370646051514,
                                            0,
                                            0,
                                            0,
                            0.079400842644919,
                                            0,
                                            0,
                                            0])

    np.testing.assert_allclose(olap[None,:], grid_test.olap.todense(order='F')[0,:])

def test_grada(grid_test):
    """
    Only tests first row
    """
    grada = np.array([        -0.804069523962725,
                                1.005086904953415,
                                -0.239306405941295,
                                0.038289024950608,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0])

    np.testing.assert_allclose(grada[None,:], grid_test.grada.todense(order='F')[0,:])

def test_gradr(grid_test):
    """
    Only tests first row
    """
    gradr = np.array([  -1.023521093490575,
                                        0,
                                        0,
                                        0,
                        1.279401366863229,
                                        0,
                                        0,
                                        0,
                        -0.304619373062681,
                                        0,
                                        0,
                                        0,
                        0.053308390285971,
                                        0,
                                        0,
                                        0])

    np.testing.assert_allclose(gradr[None,:], grid_test.gradr.todense(order='F')[0,:])


def test_diva(grid_test):
    """
    Only tests first row
    """
    diva = np.array([  0.804069523962725,
                        2.871460625295808,
                        -0.774838581429044,
                        0.038289024950608,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0])

    np.testing.assert_allclose(diva[None,:], grid_test.diva.todense(order='F')[0,:])

def test_divr(grid_test):
    """
    Only tests first row
    """
    divr = np.array([  1.023521093490575,
                                        0,
                                        0,
                                        0,
                        5.950821269325876,
                                        0,
                                        0,
                                        0,
                        -6.748813536511208,
                                        0,
                                        0,
                                        0,
                        5.229504835610331,
                                        0,
                                        0,
                                        0])

    np.testing.assert_allclose(divr[None,:], grid_test.divr.todense(order='F')[0,:])

def test_bc1(grid_test):
    bc1 = np.array([       -0.005788356657982,
                            0.061742471018477,
                            -0.324147972846990,
                            1.296591891387931,
                                            0,
                            -0.005788356657982,
                            0.061742471018477,
                            -0.324147972846990,
                                            0,
                                            0,
                            -0.005788356657982,
                            0.061742471018477,
                                            0,
                                            0,
                                            0,
                            -0.005788356657982 ])

    np.testing.assert_allclose(bc1, grid_test.bc1.flatten(order='F'))

def test_bc2(grid_test):
    bc2 = np.array([   -0.004690710192000,
                        0.066712322730668,
                        -0.525359541504014,
                        4.202876332032238,
                                        0,
                        -0.004690710192000,
                        0.066712322730668,
                        -0.525359541504014,
                                        0,
                                        0,
                        -0.004690710192000,
                        0.066712322730668,
                                        0,
                                        0,
                                        0,
                         -0.004690710192000 ])

    np.testing.assert_allclose(bc2, grid_test.bc2.flatten(order='F'))

def test_blap(grid_test):
    """
    Only tests first row
    """
    blap = np.array([       -0.007385819132810,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0])

    np.testing.assert_allclose(blap[None,:], grid_test.blap.todense(order='F')[0,:])

def test_bXa(grid_test):
    bXa = np.array([    0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069,
                        0.392699081698724,
                        1.178097245096172,
                        1.963495408493621,
                        2.748893571891069 ])

    np.testing.assert_allclose(bXa, grid_test.bXa.flatten(order='F'))

def test_bXr(grid_test):
    bXr = np.array([        2.776509728243330,
                            2.776509728243330,
                            2.776509728243330,
                            2.776509728243330,
                            3.393511890075182,
                            3.393511890075182,
                            3.393511890075182,
                            3.393511890075182,
                            4.010514051907032,
                            4.010514051907032,
                            4.010514051907032,
                            4.010514051907032,
                            4.627516213738884,
                            4.627516213738884,
                            4.627516213738884,
                            4.627516213738884 ])

    np.testing.assert_allclose(bXr, grid_test.bXr.flatten(order='F'))

def test_h1(grid_test):
    h1 = np.array([         1.266795476550548,
                            2.498496923035837,
                            2.498496923035837,
                            1.266795476550548,
                            2.894351865021322,
                            3.607629251123654,
                            3.607629251123654,
                            2.894351865021322,
                            5.797599921127889,
                            6.184648813026711,
                            6.184648813026711,
                            5.797599921127889,
                            10.993949242625382,
                            11.202885166082613,
                            11.202885166082613,
                            10.993949242625382     ])

    np.testing.assert_allclose(h1, grid_test.h1.flatten(order='F'))

def test_h2(grid_test):
    h2 = np.array([         1.266795476550548,
                            2.498496923035837,
                            2.498496923035837,
                            1.266795476550548,
                            2.894351865021322,
                            3.607629251123654,
                            3.607629251123654,
                            2.894351865021322,
                            5.797599921127889,
                            6.184648813026711,
                            6.184648813026711,
                            5.797599921127889,
                            10.993949242625382,
                            11.202885166082613,
                            11.202885166082613,
                            10.993949242625382   ])

    np.testing.assert_allclose(h2, grid_test.h2.flatten(order='F'))

def test_h3(grid_test):
    h3 = np.array([ 0.307165935651619,
                    0.741564167749160,
                    0.741564167749160,
                    0.307165935651619,
                    1.042190413606254,
                    2.516070231103444,
                    2.516070231103444,
                    1.042190413606254,
                    2.186715630561777,
                    5.279198532355475,
                    5.279198532355475,
                    2.186715630561777,
                    4.190452038686583,
                    10.116646144271131,
                    10.116646144271131,
                    4.190452038686583])

    np.testing.assert_allclose(h3, grid_test.h3.flatten(order='F'))

def test_L_lap(grid_test):
    """
    Only tests first row
    """
    L_lap = np.array([          1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0])

    np.testing.assert_allclose(L_lap[None,:], grid_test.L_lap.todense(order='F')[0,:])

def test_U_lap(grid_test):
    """
    Only tests first row
    """
    U_lap = np.array([     -3.714431723189209,
                            1.641330945653003,
                            -0.311752025346393,
                            0.046837243362774,
                            2.794205855224841,
                                            0,
                                            0,
                                            0,
                            -0.537213651942752,
                                            0,
                                            0,
                                            0,
                            0.088409175370554,
                                            0,
                                            0,
                                            0])

    np.testing.assert_allclose(U_lap[None,:], grid_test.U_lap.todense(order='F')[0,:])

